<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpf="clr-namespace:CloudFoundry.VisualStudio.Style"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit">

    <Style x:Key="EllipseFocusVisualStyle" TargetType="{x:Type Control}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Ellipse Margin="2"
                             RenderOptions.EdgeMode="Aliased"
                             Stroke="{DynamicResource {x:Static wpf:ControlColors.ForegroundKey}}"
                             StrokeThickness="1"
                             StrokeDashArray="1 2" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="FocusVisualStyle" TargetType="{x:Type Control}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2"
                               RenderOptions.EdgeMode="Aliased"
                               Stroke="{DynamicResource {x:Static wpf:ControlColors.ForegroundKey}}"
                               StrokeThickness="1"
                               StrokeDashArray="1 1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="IconPath" TargetType="{x:Type Path}">
        <Setter Property="Fill" Value="{DynamicResource {x:Static wpf:ControlColors.ForegroundKey}}" />
        <Setter Property="MaxWidth" Value="10" />
        <Setter Property="MaxHeight" Value="10" />
        <Setter Property="Margin" Value="3" />
        <Setter Property="Stretch" Value="Uniform" />
    </Style>

    <Style TargetType="{x:Type Control}">
        <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundKey}}" />
        <Setter Property="Foreground" Value="{DynamicResource {x:Static wpf:ControlColors.ControlForegroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderSelectedKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundHoverKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundDisabledKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static wpf:ControlColors.ControlForegroundDisabledKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderDisabledKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- This style should match Control as much as possible -->
    <Style x:Key="ControlLike" TargetType="{x:Type Border}">
        <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundKey}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderKey}}" />
        <Setter Property="BorderThickness" Value="1" />
        <Style.Triggers>
            <Trigger Property="IsFocused" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderSelectedKey}}" />
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundHoverKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundDisabledKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderDisabledKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>