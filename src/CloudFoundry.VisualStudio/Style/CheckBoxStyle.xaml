<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:s="clr-namespace:System;assembly=mscorlib"
                    xmlns:wpf="clr-namespace:CloudFoundry.VisualStudio.Style"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:conv="clr-namespace:Xceed.Wpf.Toolkit.Core.Converters;assembly=Xceed.Wpf.Toolkit">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="Control.xaml"/>
    </ResourceDictionary.MergedDictionaries>


    <Style TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type Control}}">
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid Background="Transparent">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border x:Name="checkBoxBorder"
                                BorderBrush="{TemplateBinding BorderBrush}"
                                BorderThickness="{TemplateBinding BorderThickness}"
                                Background="{TemplateBinding Background}"
                                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                Margin="1"
                                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                MinWidth="{Binding ActualHeight,RelativeSource={RelativeSource Self}}"
                                MinHeight="{Binding ActualWidth,RelativeSource={RelativeSource Self}}">
                            <Grid x:Name="markGrid">
                                <Path x:Name="optionMark"
                                      Style="{StaticResource IconPath}"
                                      Data="F1M34.296875,9.67062377929688L39.21875,13.3424987792969 23.390625,36.9674987792969 22.859375,36.9674987792969 9.296875,25.2487487792969 13.125,20.2331237792969 22.0625,27.9362487792969 34.296875,9.67062377929688z"
                                      HorizontalAlignment="Center"
                                      VerticalAlignment="Center"
                                      Opacity="0" />
                                <Rectangle x:Name="indeterminateMark"
                                           Fill="{TemplateBinding Foreground}"
                                           Margin="2"
                                           Opacity="0" />
                            </Grid>
                        </Border>
                        <Grid Grid.Column="1" Margin="4 0 0 0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>
                            <Rectangle x:Name="focusRect"
                                       Grid.Column="0"
                                       RenderOptions.EdgeMode="Aliased"
                                       Stroke="{DynamicResource {x:Static wpf:ControlColors.ForegroundKey}}"
                                       StrokeThickness="1"
                                       StrokeDashArray="1 1"
                                       Visibility="Hidden" />
                            <ContentPresenter x:Name="contentPresenter"
                                              Grid.Column="0"
                                              ContentTemplate="{TemplateBinding ContentTemplate}"
                                              Content="{TemplateBinding Content}"
                                              ContentStringFormat="{TemplateBinding ContentStringFormat}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              Margin="{TemplateBinding Padding}"
                                              RecognizesAccessKey="True"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter Property="Visibility" TargetName="focusRect" Value="Visible" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Opacity" TargetName="optionMark" Value="1" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter Property="Opacity" TargetName="optionMark" Value="0" />
                            <Setter Property="Opacity" TargetName="indeterminateMark" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundHoverKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderHoverKey}}" />
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundPressedKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderPressedKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static wpf:ControlColors.ControlForegroundPressedKey}}" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBackgroundDisabledKey}}" />
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static wpf:ControlColors.ControlBorderDisabledKey}}" />
                <Setter Property="Foreground" Value="{DynamicResource {x:Static wpf:ControlColors.ControlForegroundDisabledKey}}" />
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>